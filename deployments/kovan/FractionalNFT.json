{
  "address": "0x2f28d237C966cec9A51333bE077E4d466c0825Fb",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FractionalNFT__NFTNotmadePubliYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FractionalNFT__NoPermissionToBuySharesForNFT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UsersShareinNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "buySharesInNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NFTPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "earnRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAmountCollectedForNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTRemainingShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTSharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSharesOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUsersShareInNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NFTPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharesOwnerWantsToKeep",
          "type": "uint256"
        }
      ],
      "name": "makeNFTPublic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftSharesAndItsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sharesHoldedByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "stockSplit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NFTPrice",
          "type": "uint256"
        }
      ],
      "name": "updateSharePriceAfterNewListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPublicFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e717165a238328a690a69d042f825f6d424e00a9b234994b4299a333e3c45e2",
  "receipt": {
    "to": null,
    "from": "0xAf96A982239392DBC1EEb440cf762C299ecEd78f",
    "contractAddress": "0x2f28d237C966cec9A51333bE077E4d466c0825Fb",
    "transactionIndex": 0,
    "gasUsed": "3548269",
    "logsBloom": "0x
    "blockHash": "0x03120bc27f9fa2aad495f786e464c5263160d4a95f31086c9e69b633caea7d33",
    "transactionHash": "0x9e717165a238328a690a69d042f825f6d424e00a9b234994b4299a333e3c45e2",
    "logs": [],
    "blockNumber": 32570392,
    "cumulativeGasUsed": "3548269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59562fe7ab405b2a93b9543f196eee25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FractionalNFT__NFTNotmadePubliYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FractionalNFT__NoPermissionToBuySharesForNFT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UsersShareinNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"buySharesInNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFTPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"earnRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAmountCollectedForNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTRemainingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSharesOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsersShareInNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFTPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesOwnerWantsToKeep\",\"type\":\"uint256\"}],\"name\":\"makeNFTPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftSharesAndItsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sharesHoldedByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"stockSplit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NFTPrice\",\"type\":\"uint256\"}],\"name\":\"updateSharePriceAfterNewListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPublicFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FractionalNFT.sol\":\"FractionalNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/FractionalNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nerror FractionalNFT__NoPermissionToBuySharesForNFT();\\nerror FractionalNFT__NFTNotmadePubliYet();\\n\\ncontract FractionalNFT is ERC20 {\\n    address contractOwner;\\n\\n    constructor() ERC20(\\\"Divide and Own\\\", \\\"FRACTION\\\") {\\n        contractOwner = msg.sender;\\n    }\\n\\n    uint256 fees = 1e15;\\n\\n    struct NFTShareInfo {\\n        uint256 totalShares;\\n        uint256 sharePrice;\\n    }\\n\\n    mapping(address => mapping(uint256 => mapping(address => uint256)))\\n        public UsersShareinNFT;\\n    mapping(address => mapping(uint256 => address[])) public nftOwners;\\n    mapping(address => mapping(uint256 => uint256)) public sharesHoldedByOwner;\\n    mapping(address => mapping(uint256 => NFTShareInfo))\\n        public nftSharesAndItsPrice;\\n    mapping(address => mapping(uint256 => uint256)) amountCollectedForNFT;\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) alreadyEarnedRoyalty;\\n    mapping(address => mapping(uint256 => uint256)) nftTotalShares;\\n    uint256 feesCollected;\\n\\n    function makeNFTPublic(\\n        address NFT,\\n        uint256 tokenId,\\n        uint256 shares,\\n        uint256 NFTPrice,\\n        uint256 sharesOwnerWantsToKeep\\n    ) public payable {\\n        IERC721 nft = IERC721(NFT);\\n        if (msg.sender != nft.ownerOf(tokenId)) {\\n            revert FractionalNFT__NoPermissionToBuySharesForNFT();\\n        }\\n\\n        require(msg.value == fees, \\\"Not Sending Enough ETH to Buy Shares\\\");\\n        _mint(msg.sender, shares);\\n        nftSharesAndItsPrice[NFT][tokenId].totalShares =\\n            shares -\\n            sharesOwnerWantsToKeep; // Shares available for public :\\n        uint256 shareprice = (NFTPrice) / (shares);\\n        nftSharesAndItsPrice[NFT][tokenId].sharePrice = shareprice;\\n        feesCollected += fees;\\n        sharesHoldedByOwner[NFT][tokenId] = sharesOwnerWantsToKeep;\\n        nftTotalShares[NFT][tokenId] = shares;\\n    }\\n\\n    function buySharesInNFT(\\n        address NFT,\\n        uint256 tokenId,\\n        uint256 shares\\n    ) public payable {\\n        if (nftSharesAndItsPrice[NFT][tokenId].totalShares <= 0) {\\n            revert FractionalNFT__NFTNotmadePubliYet();\\n        }\\n\\n        require(\\n            shares <= nftSharesAndItsPrice[NFT][tokenId].totalShares,\\n            \\\"You are trying to buy shares more than availability\\\"\\n        );\\n\\n        address ownerOfNFT = IERC721(NFT).ownerOf(tokenId);\\n        uint256 amountttToPay = nftSharesAndItsPrice[NFT][tokenId].sharePrice *\\n            shares;\\n        require(\\n            msg.value == amountttToPay,\\n            \\\"Not sending enough ETH to buy shares\\\"\\n        );\\n        _transfer(ownerOfNFT, msg.sender, shares);\\n        nftSharesAndItsPrice[NFT][tokenId].totalShares -= shares;\\n        amountCollectedForNFT[NFT][tokenId] += amountttToPay;\\n        UsersShareinNFT[NFT][tokenId][msg.sender] = shares;\\n        nftOwners[NFT][tokenId].push(msg.sender);\\n    }\\n\\n    function withdraw(address NFT, uint256 tokenId) public {\\n        require(\\n            amountCollectedForNFT[NFT][tokenId] > 0,\\n            \\\"No one bought the shares sadly or You have already withdrawn the money collected\\\"\\n        );\\n        require(\\n            msg.sender == IERC721(NFT).ownerOf(tokenId),\\n            \\\"Do not have the permission to withdraw\\\"\\n        );\\n        amountCollectedForNFT[NFT][tokenId] = 0;\\n        (bool succ, ) = payable(msg.sender).call{\\n            value: amountCollectedForNFT[NFT][tokenId]\\n        }(\\\"\\\");\\n    }\\n\\n    function withdrawPublicFees() public {\\n        require(feesCollected > 0, \\\"Cannot withdraw\\\");\\n        require(\\n            msg.sender == contractOwner,\\n            \\\"Do not have permission to withdraw contract's fees\\\"\\n        );\\n        feesCollected = 0;\\n        (bool succ, ) = payable(contractOwner).call{value: feesCollected}(\\\"\\\");\\n    }\\n\\n    // n could be 2,3,4,5.... etc\\n    function stockSplit(\\n        address NFT,\\n        uint256 tokenId,\\n        uint256 n\\n    ) public payable {\\n        require(msg.value == fees, \\\"Not Enough Fees provided to buy shares\\\");\\n        require(\\n            msg.sender == IERC721(NFT).ownerOf(tokenId),\\n            \\\"Only owner can do stock split\\\"\\n        );\\n        uint256 totalNFTShares = nftTotalShares[NFT][tokenId];\\n\\n        _mint(IERC721(NFT).ownerOf(tokenId), totalNFTShares * (n - 1));\\n        feesCollected += fees;\\n        nftSharesAndItsPrice[NFT][tokenId].totalShares =\\n            nftSharesAndItsPrice[NFT][tokenId].totalShares *\\n            n;\\n        nftSharesAndItsPrice[NFT][tokenId].sharePrice =\\n            (nftSharesAndItsPrice[NFT][tokenId].sharePrice) /\\n            n;\\n        nftTotalShares[NFT][tokenId] *= n;\\n\\n        sharesHoldedByOwner[NFT][tokenId] =\\n            sharesHoldedByOwner[NFT][tokenId] *\\n            n;\\n\\n        for (uint256 i = 0; i < nftOwners[NFT][tokenId].length; i++) {\\n            address shareHolder = nftOwners[NFT][tokenId][i];\\n            _transfer(\\n                IERC721(NFT).ownerOf(tokenId),\\n                shareHolder,\\n                UsersShareinNFT[NFT][tokenId][shareHolder] * (n - 1)\\n            );\\n            UsersShareinNFT[NFT][tokenId][shareHolder] =\\n                UsersShareinNFT[NFT][tokenId][shareHolder] *\\n                n;\\n        }\\n    }\\n\\n    function updateSharePriceAfterNewListing(\\n        address NFT,\\n        uint256 tokenId,\\n        uint256 NFTPrice\\n    ) public {\\n        uint256 totalNFTShares = nftTotalShares[NFT][tokenId];\\n        nftSharesAndItsPrice[NFT][tokenId].sharePrice =\\n            NFTPrice /\\n            totalNFTShares;\\n    }\\n\\n    // Let's decide royalty fees of 5% and out of that owner decides to distribute n% amongst the share holders:\\n\\n    function earnRoyalty(\\n        address NFT,\\n        uint256 tokenId,\\n        uint256 NFTPrice,\\n        uint256 n\\n    ) public {\\n        require(\\n            alreadyEarnedRoyalty[NFT][tokenId][NFTPrice] == 0,\\n            \\\"You have already earned royalty\\\"\\n        );\\n        uint256 totalShares = nftTotalShares[NFT][tokenId];\\n        uint256 sharesHoldedByPerson = UsersShareinNFT[NFT][tokenId][\\n            msg.sender\\n        ];\\n\\n        uint256 royaltyEarned = (sharesHoldedByPerson * NFTPrice * 5 * n) /\\n            (totalShares * 100 * 100);\\n        require(royaltyEarned > 0, \\\"You do not have ownership in this NFT\\\");\\n        alreadyEarnedRoyalty[NFT][tokenId][NFTPrice] = 1;\\n        (bool succ, ) = payable(msg.sender).call{value: royaltyEarned}(\\\"\\\");\\n    }\\n\\n    function getNFTSharePrice(address NFT, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return nftSharesAndItsPrice[NFT][tokenId].sharePrice;\\n    }\\n\\n    function getNFTRemainingShares(address NFT, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return nftSharesAndItsPrice[NFT][tokenId].totalShares;\\n    }\\n\\n    function getFeesCollected() public view returns (uint256) {\\n        return feesCollected;\\n    }\\n\\n    function getSharesOfOwner(address NFT, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return sharesHoldedByOwner[NFT][tokenId];\\n    }\\n\\n    function getNFTTotalShares(address NFT, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return nftTotalShares[NFT][tokenId];\\n    }\\n\\n    function getUsersShareInNFT(\\n        address NFT,\\n        uint256 tokenId,\\n        address user\\n    ) public view returns (uint256) {\\n        return UsersShareinNFT[NFT][tokenId][user];\\n    }\\n\\n    function getAmountCollectedForNFT(address NFT, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return amountCollectedForNFT[NFT][tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x2e21897614982c613a32ced572378fc8f97e50ab3e51994d89419f924e0baa09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c680006006553480156200001c57600080fd5b506040518060400160405280600e81526020017f44697669646520616e64204f776e0000000000000000000000000000000000008152506040518060400160405280600881526020017f4652414354494f4e0000000000000000000000000000000000000000000000008152508160039080519060200190620000a192919062000104565b508060049080519060200190620000ba92919062000104565b50505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000219565b8280546200011290620001b4565b90600052602060002090601f01602090048101928262000136576000855562000182565b82601f106200015157805160ff191683800117855562000182565b8280016001018555821562000182579182015b828111156200018157825182559160200191906001019062000164565b5b50905062000191919062000195565b5090565b5b80821115620001b057600081600090555060010162000196565b5090565b60006002820490506001821680620001cd57607f821691505b60208210811415620001e457620001e3620001ea565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613dbd80620002296000396000f3fe6080604052600436106101c25760003560e01c80637f25d6e4116100f7578063a85b8ca711610095578063dd62ed3e11610064578063dd62ed3e146106d3578063e3e56c9a14610710578063f3fef3a31461072c578063fed9736c14610755576101c2565b8063a85b8ca7146105f1578063a9059cbb1461062e578063b695b52f1461066b578063d4aae80f146106a8576101c2565b80638b0a9c4d116100d15780638b0a9c4d1461052f57806395d89b411461054b57806396a4279514610576578063a457c2d7146105b4576101c2565b80637f25d6e4146104bf5780637fdd0a3f146104db57806382eb62e6146104f2576101c2565b8063395093511161016457806350aa57721161013e57806350aa5772146103cb57806350eeb4361461040857806370a08231146104455780637d6f79f314610482576101c2565b8063395093511461033c5780633abe1f04146103795780634fb2e8f1146103a2576101c2565b806323b872dd116101a057806323b872dd1461025a57806324eadc6614610297578063313ce567146102d4578063384ea8e1146102ff576101c2565b806306fdde03146101c7578063095ea7b3146101f257806318160ddd1461022f575b600080fd5b3480156101d357600080fd5b506101dc610792565b6040516101e9919061321f565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190612cdb565b610824565b6040516102269190613204565b60405180910390f35b34801561023b57600080fd5b50610244610847565b60405161025191906134a1565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190612c88565b610851565b60405161028e9190613204565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b99190612cdb565b610880565b6040516102cb91906134a1565b60405180910390f35b3480156102e057600080fd5b506102e96108db565b6040516102f691906134e5565b60405180910390f35b34801561030b57600080fd5b5061032660048036038101906103219190612cdb565b6108e4565b60405161033391906134a1565b60405180910390f35b34801561034857600080fd5b50610363600480360381019061035e9190612cdb565b610942565b6040516103709190613204565b60405180910390f35b34801561038557600080fd5b506103a0600480360381019061039b9190612d6e565b610979565b005b3480156103ae57600080fd5b506103c960048036038101906103c49190612dc1565b610a37565b005b3480156103d757600080fd5b506103f260048036038101906103ed9190612cdb565b610d2b565b6040516103ff91906134a1565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a9190612cdb565b610d50565b60405161043c91906134a1565b60405180910390f35b34801561045157600080fd5b5061046c60048036038101906104679190612bee565b610dab565b60405161047991906134a1565b60405180910390f35b34801561048e57600080fd5b506104a960048036038101906104a49190612cdb565b610df3565b6040516104b691906134a1565b60405180910390f35b6104d960048036038101906104d49190612d6e565b610e4e565b005b3480156104e757600080fd5b506104f06112c9565b005b3480156104fe57600080fd5b5061051960048036038101906105149190612d1b565b611439565b60405161052691906134a1565b60405180910390f35b61054960048036038101906105449190612e28565b61146b565b005b34801561055757600080fd5b50610560611744565b60405161056d919061321f565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612cdb565b6117d6565b6040516105ab9291906134bc565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190612cdb565b611807565b6040516105e89190613204565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190612d1b565b61187e565b60405161062591906134a1565b60405180910390f35b34801561063a57600080fd5b5061065560048036038101906106509190612cdb565b611917565b6040516106629190613204565b60405180910390f35b34801561067757600080fd5b50610692600480360381019061068d9190612cdb565b61193a565b60405161069f91906134a1565b60405180910390f35b3480156106b457600080fd5b506106bd611998565b6040516106ca91906134a1565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190612c48565b6119a2565b60405161070791906134a1565b60405180910390f35b61072a60048036038101906107259190612d6e565b611a29565b005b34801561073857600080fd5b50610753600480360381019061074e9190612cdb565b61226a565b005b34801561076157600080fd5b5061077c60048036038101906107779190612d6e565b61250a565b60405161078991906131e9565b60405180910390f35b6060600380546107a1906136c4565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd906136c4565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b5050505050905090565b60008061082f612565565b905061083c81858561256d565b600191505092915050565b6000600254905090565b60008061085c612565565b9050610869858285612738565b6108748585856127c4565b60019150509392505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60006012905090565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154905092915050565b60008061094d612565565b905061096e81858561095f85896119a2565b6109699190613527565b61256d565b600191505092915050565b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080826109da919061357d565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001018190555050505050565b6000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000205414610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290613321565b60405180910390fd5b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205490506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060648084610bd291906135ae565b610bdc91906135ae565b8460058785610beb91906135ae565b610bf591906135ae565b610bff91906135ae565b610c09919061357d565b905060008111610c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4590613301565b60405180910390fd5b6001600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610cdb906131d4565b60006040518083038185875af1925050503d8060008114610d18576040519150601f19603f3d011682016040523d82523d6000602084013e610d1d565b606091505b505090505050505050505050565b6009602052816000526040600020602052806000526040600020600091509150505481565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000015411610edb576040517fc300673300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154811115610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890613401565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610fac91906134a1565b60206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190612c1b565b9050600082600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206001015461105f91906135ae565b90508034146110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109a906133e1565b60405180910390fd5b6110ae8233856127c4565b82600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160008282546111119190613608565b9250508190555080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008282546111789190613527565b9250508190555082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600e541161130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130590613261565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461139e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611395906132a1565b60405180910390fd5b6000600e819055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600e546040516113f0906131d4565b60006040518083038185875af1925050503d806000811461142d576040519150601f19603f3d011682016040523d82523d6000602084013e611432565b606091505b5050905050565b600760205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b60008590508073ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016114a991906134a1565b60206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461155d576040517f1045996600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065434146115a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159890613341565b60405180910390fd5b6115ab3385612a45565b81846115b79190613608565b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600001819055506000848461161c919061357d565b905080600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010181905550600654600e600082825461168a9190613527565b9250508190555082600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555084600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555050505050505050565b606060048054611753906136c4565b80601f016020809104026020016040519081016040528092919081815260200182805461177f906136c4565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b5050505050905090565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b600080611812612565565b9050600061182082866119a2565b905083811015611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c90613441565b60405180910390fd5b611872828686840361256d565b60019250505092915050565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b600080611922612565565b905061192f8185856127c4565b600191505092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154905092915050565b6000600e54905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6006543414611a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6490613381565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611aa691906134a1565b60206040518083038186803b158015611abe57600080fd5b505afa158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90613461565b60405180910390fd5b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050611c618473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401611bf491906134a1565b60206040518083038186803b158015611c0c57600080fd5b505afa158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c449190612c1b565b600184611c519190613608565b83611c5c91906135ae565b612a45565b600654600e6000828254611c759190613527565b9250508190555081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000154611cdb91906135ae565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000018190555081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010154611d91919061357d565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001018190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000828254611e4891906135ae565b9250508190555081600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054611eab91906135ae565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555060005b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002080549050811015612263576000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000208281548110611fc157611fc06137cc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506121258673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161202a91906134a1565b60206040518083038186803b15801561204257600080fd5b505afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612c1b565b826001876120889190613608565b600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212091906135ae565b6127c4565b83600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121be91906135ae565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061225b906136f6565b915050611f02565b5050505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054116122fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f490613421565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b815260040161233691906134a1565b60206040518083038186803b15801561234e57600080fd5b505afa158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ea90613361565b60405180910390fd5b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020546040516124bf906131d4565b60006040518083038185875af1925050503d80600081146124fc576040519150601f19603f3d011682016040523d82523d6000602084013e612501565b606091505b50509050505050565b6008602052826000526040600020602052816000526040600020818154811061253257600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d4906133c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561264d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264490613281565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161272b91906134a1565b60405180910390a3505050565b600061274484846119a2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146127be57818110156127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a7906132c1565b60405180910390fd5b6127bd848484840361256d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282b906133a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289b90613241565b60405180910390fd5b6128af838383612ba5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292c906132e1565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129c89190613527565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a2c91906134a1565b60405180910390a3612a3f848484612baa565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aac90613481565b60405180910390fd5b612ac160008383612ba5565b8060026000828254612ad39190613527565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b289190613527565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612b8d91906134a1565b60405180910390a3612ba160008383612baa565b5050565b505050565b505050565b600081359050612bbe81613d59565b92915050565b600081519050612bd381613d59565b92915050565b600081359050612be881613d70565b92915050565b600060208284031215612c0457612c036137fb565b5b6000612c1284828501612baf565b91505092915050565b600060208284031215612c3157612c306137fb565b5b6000612c3f84828501612bc4565b91505092915050565b60008060408385031215612c5f57612c5e6137fb565b5b6000612c6d85828601612baf565b9250506020612c7e85828601612baf565b9150509250929050565b600080600060608486031215612ca157612ca06137fb565b5b6000612caf86828701612baf565b9350506020612cc086828701612baf565b9250506040612cd186828701612bd9565b9150509250925092565b60008060408385031215612cf257612cf16137fb565b5b6000612d0085828601612baf565b9250506020612d1185828601612bd9565b9150509250929050565b600080600060608486031215612d3457612d336137fb565b5b6000612d4286828701612baf565b9350506020612d5386828701612bd9565b9250506040612d6486828701612baf565b9150509250925092565b600080600060608486031215612d8757612d866137fb565b5b6000612d9586828701612baf565b9350506020612da686828701612bd9565b9250506040612db786828701612bd9565b9150509250925092565b60008060008060808587031215612ddb57612dda6137fb565b5b6000612de987828801612baf565b9450506020612dfa87828801612bd9565b9350506040612e0b87828801612bd9565b9250506060612e1c87828801612bd9565b91505092959194509250565b600080600080600060a08688031215612e4457612e436137fb565b5b6000612e5288828901612baf565b9550506020612e6388828901612bd9565b9450506040612e7488828901612bd9565b9350506060612e8588828901612bd9565b9250506080612e9688828901612bd9565b9150509295509295909350565b612eac8161363c565b82525050565b612ebb8161364e565b82525050565b6000612ecc82613500565b612ed68185613516565b9350612ee6818560208601613691565b612eef81613800565b840191505092915050565b6000612f07602383613516565b9150612f1282613811565b604082019050919050565b6000612f2a600f83613516565b9150612f3582613860565b602082019050919050565b6000612f4d602283613516565b9150612f5882613889565b604082019050919050565b6000612f70603283613516565b9150612f7b826138d8565b604082019050919050565b6000612f93601d83613516565b9150612f9e82613927565b602082019050919050565b6000612fb6602683613516565b9150612fc182613950565b604082019050919050565b6000612fd9602583613516565b9150612fe48261399f565b604082019050919050565b6000612ffc601f83613516565b9150613007826139ee565b602082019050919050565b600061301f602483613516565b915061302a82613a17565b604082019050919050565b6000613042602683613516565b915061304d82613a66565b604082019050919050565b6000613065602683613516565b915061307082613ab5565b604082019050919050565b6000613088602583613516565b915061309382613b04565b604082019050919050565b60006130ab60008361350b565b91506130b682613b53565b600082019050919050565b60006130ce602483613516565b91506130d982613b56565b604082019050919050565b60006130f1602483613516565b91506130fc82613ba5565b604082019050919050565b6000613114603383613516565b915061311f82613bf4565b604082019050919050565b6000613137605083613516565b915061314282613c43565b606082019050919050565b600061315a602583613516565b915061316582613cb8565b604082019050919050565b600061317d601d83613516565b915061318882613d07565b602082019050919050565b60006131a0601f83613516565b91506131ab82613d30565b602082019050919050565b6131bf8161367a565b82525050565b6131ce81613684565b82525050565b60006131df8261309e565b9150819050919050565b60006020820190506131fe6000830184612ea3565b92915050565b60006020820190506132196000830184612eb2565b92915050565b600060208201905081810360008301526132398184612ec1565b905092915050565b6000602082019050818103600083015261325a81612efa565b9050919050565b6000602082019050818103600083015261327a81612f1d565b9050919050565b6000602082019050818103600083015261329a81612f40565b9050919050565b600060208201905081810360008301526132ba81612f63565b9050919050565b600060208201905081810360008301526132da81612f86565b9050919050565b600060208201905081810360008301526132fa81612fa9565b9050919050565b6000602082019050818103600083015261331a81612fcc565b9050919050565b6000602082019050818103600083015261333a81612fef565b9050919050565b6000602082019050818103600083015261335a81613012565b9050919050565b6000602082019050818103600083015261337a81613035565b9050919050565b6000602082019050818103600083015261339a81613058565b9050919050565b600060208201905081810360008301526133ba8161307b565b9050919050565b600060208201905081810360008301526133da816130c1565b9050919050565b600060208201905081810360008301526133fa816130e4565b9050919050565b6000602082019050818103600083015261341a81613107565b9050919050565b6000602082019050818103600083015261343a8161312a565b9050919050565b6000602082019050818103600083015261345a8161314d565b9050919050565b6000602082019050818103600083015261347a81613170565b9050919050565b6000602082019050818103600083015261349a81613193565b9050919050565b60006020820190506134b660008301846131b6565b92915050565b60006040820190506134d160008301856131b6565b6134de60208301846131b6565b9392505050565b60006020820190506134fa60008301846131c5565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006135328261367a565b915061353d8361367a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135725761357161373f565b5b828201905092915050565b60006135888261367a565b91506135938361367a565b9250826135a3576135a261376e565b5b828204905092915050565b60006135b98261367a565b91506135c48361367a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135fd576135fc61373f565b5b828202905092915050565b60006136138261367a565b915061361e8361367a565b9250828210156136315761363061373f565b5b828203905092915050565b60006136478261365a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156136af578082015181840152602081019050613694565b838111156136be576000848401525b50505050565b600060028204905060018216806136dc57607f821691505b602082108114156136f0576136ef61379d565b5b50919050565b60006137018261367a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137345761373361373f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f742077697468647261770000000000000000000000000000000000600082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f446f206e6f742068617665207065726d697373696f6e20746f2077697468647260008201527f617720636f6e7472616374277320666565730000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f742068617665206f776e65727368697020696e2074686960008201527f73204e4654000000000000000000000000000000000000000000000000000000602082015250565b7f596f75206861766520616c7265616479206561726e656420726f79616c747900600082015250565b7f4e6f742053656e64696e6720456e6f7567682045544820746f2042757920536860008201527f6172657300000000000000000000000000000000000000000000000000000000602082015250565b7f446f206e6f74206861766520746865207065726d697373696f6e20746f20776960008201527f7468647261770000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f75676820466565732070726f766964656420746f206275792060008201527f7368617265730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f742073656e64696e6720656e6f7567682045544820746f2062757920736860008201527f6172657300000000000000000000000000000000000000000000000000000000602082015250565b7f596f752061726520747279696e6720746f2062757920736861726573206d6f7260008201527f65207468616e20617661696c6162696c69747900000000000000000000000000602082015250565b7f4e6f206f6e6520626f756768742074686520736861726573207361646c79206f60008201527f7220596f75206861766520616c72656164792077697468647261776e2074686560208201527f206d6f6e657920636f6c6c656374656400000000000000000000000000000000604082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206f776e65722063616e20646f2073746f636b2073706c6974000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b613d628161363c565b8114613d6d57600080fd5b50565b613d798161367a565b8114613d8457600080fd5b5056fea2646970667358221220969c72703fdc6637e45b40e9c3af648e234076c98d1ecba061357f1ec8cdb93864736f6c63430008050033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80637f25d6e4116100f7578063a85b8ca711610095578063dd62ed3e11610064578063dd62ed3e146106d3578063e3e56c9a14610710578063f3fef3a31461072c578063fed9736c14610755576101c2565b8063a85b8ca7146105f1578063a9059cbb1461062e578063b695b52f1461066b578063d4aae80f146106a8576101c2565b80638b0a9c4d116100d15780638b0a9c4d1461052f57806395d89b411461054b57806396a4279514610576578063a457c2d7146105b4576101c2565b80637f25d6e4146104bf5780637fdd0a3f146104db57806382eb62e6146104f2576101c2565b8063395093511161016457806350aa57721161013e57806350aa5772146103cb57806350eeb4361461040857806370a08231146104455780637d6f79f314610482576101c2565b8063395093511461033c5780633abe1f04146103795780634fb2e8f1146103a2576101c2565b806323b872dd116101a057806323b872dd1461025a57806324eadc6614610297578063313ce567146102d4578063384ea8e1146102ff576101c2565b806306fdde03146101c7578063095ea7b3146101f257806318160ddd1461022f575b600080fd5b3480156101d357600080fd5b506101dc610792565b6040516101e9919061321f565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190612cdb565b610824565b6040516102269190613204565b60405180910390f35b34801561023b57600080fd5b50610244610847565b60405161025191906134a1565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190612c88565b610851565b60405161028e9190613204565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b99190612cdb565b610880565b6040516102cb91906134a1565b60405180910390f35b3480156102e057600080fd5b506102e96108db565b6040516102f691906134e5565b60405180910390f35b34801561030b57600080fd5b5061032660048036038101906103219190612cdb565b6108e4565b60405161033391906134a1565b60405180910390f35b34801561034857600080fd5b50610363600480360381019061035e9190612cdb565b610942565b6040516103709190613204565b60405180910390f35b34801561038557600080fd5b506103a0600480360381019061039b9190612d6e565b610979565b005b3480156103ae57600080fd5b506103c960048036038101906103c49190612dc1565b610a37565b005b3480156103d757600080fd5b506103f260048036038101906103ed9190612cdb565b610d2b565b6040516103ff91906134a1565b60405180910390f35b34801561041457600080fd5b5061042f600480360381019061042a9190612cdb565b610d50565b60405161043c91906134a1565b60405180910390f35b34801561045157600080fd5b5061046c60048036038101906104679190612bee565b610dab565b60405161047991906134a1565b60405180910390f35b34801561048e57600080fd5b506104a960048036038101906104a49190612cdb565b610df3565b6040516104b691906134a1565b60405180910390f35b6104d960048036038101906104d49190612d6e565b610e4e565b005b3480156104e757600080fd5b506104f06112c9565b005b3480156104fe57600080fd5b5061051960048036038101906105149190612d1b565b611439565b60405161052691906134a1565b60405180910390f35b61054960048036038101906105449190612e28565b61146b565b005b34801561055757600080fd5b50610560611744565b60405161056d919061321f565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612cdb565b6117d6565b6040516105ab9291906134bc565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190612cdb565b611807565b6040516105e89190613204565b60405180910390f35b3480156105fd57600080fd5b5061061860048036038101906106139190612d1b565b61187e565b60405161062591906134a1565b60405180910390f35b34801561063a57600080fd5b5061065560048036038101906106509190612cdb565b611917565b6040516106629190613204565b60405180910390f35b34801561067757600080fd5b50610692600480360381019061068d9190612cdb565b61193a565b60405161069f91906134a1565b60405180910390f35b3480156106b457600080fd5b506106bd611998565b6040516106ca91906134a1565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190612c48565b6119a2565b60405161070791906134a1565b60405180910390f35b61072a60048036038101906107259190612d6e565b611a29565b005b34801561073857600080fd5b50610753600480360381019061074e9190612cdb565b61226a565b005b34801561076157600080fd5b5061077c60048036038101906107779190612d6e565b61250a565b60405161078991906131e9565b60405180910390f35b6060600380546107a1906136c4565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd906136c4565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b5050505050905090565b60008061082f612565565b905061083c81858561256d565b600191505092915050565b6000600254905090565b60008061085c612565565b9050610869858285612738565b6108748585856127c4565b60019150509392505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60006012905090565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154905092915050565b60008061094d612565565b905061096e81858561095f85896119a2565b6109699190613527565b61256d565b600191505092915050565b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080826109da919061357d565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001018190555050505050565b6000600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000205414610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290613321565b60405180910390fd5b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205490506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060648084610bd291906135ae565b610bdc91906135ae565b8460058785610beb91906135ae565b610bf591906135ae565b610bff91906135ae565b610c09919061357d565b905060008111610c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4590613301565b60405180910390fd5b6001600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610cdb906131d4565b60006040518083038185875af1925050503d8060008114610d18576040519150601f19603f3d011682016040523d82523d6000602084013e610d1d565b606091505b505090505050505050505050565b6009602052816000526040600020602052806000526040600020600091509150505481565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000015411610edb576040517fc300673300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154811115610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890613401565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610fac91906134a1565b60206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190612c1b565b9050600082600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206001015461105f91906135ae565b90508034146110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109a906133e1565b60405180910390fd5b6110ae8233856127c4565b82600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160008282546111119190613608565b9250508190555080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008282546111789190613527565b9250508190555082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000600e541161130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130590613261565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461139e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611395906132a1565b60405180910390fd5b6000600e819055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600e546040516113f0906131d4565b60006040518083038185875af1925050503d806000811461142d576040519150601f19603f3d011682016040523d82523d6000602084013e611432565b606091505b5050905050565b600760205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b60008590508073ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016114a991906134a1565b60206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461155d576040517f1045996600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065434146115a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159890613341565b60405180910390fd5b6115ab3385612a45565b81846115b79190613608565b600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600001819055506000848461161c919061357d565b905080600a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010181905550600654600e600082825461168a9190613527565b9250508190555082600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555084600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555050505050505050565b606060048054611753906136c4565b80601f016020809104026020016040519081016040528092919081815260200182805461177f906136c4565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b5050505050905090565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b600080611812612565565b9050600061182082866119a2565b905083811015611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c90613441565b60405180910390fd5b611872828686840361256d565b60019250505092915050565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b600080611922612565565b905061192f8185856127c4565b600191505092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154905092915050565b6000600e54905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6006543414611a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6490613381565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611aa691906134a1565b60206040518083038186803b158015611abe57600080fd5b505afa158015611ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af69190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90613461565b60405180910390fd5b6000600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050611c618473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401611bf491906134a1565b60206040518083038186803b158015611c0c57600080fd5b505afa158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c449190612c1b565b600184611c519190613608565b83611c5c91906135ae565b612a45565b600654600e6000828254611c759190613527565b9250508190555081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000154611cdb91906135ae565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000018190555081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010154611d91919061357d565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206001018190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000828254611e4891906135ae565b9250508190555081600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054611eab91906135ae565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555060005b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002080549050811015612263576000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000208281548110611fc157611fc06137cc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506121258673ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161202a91906134a1565b60206040518083038186803b15801561204257600080fd5b505afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190612c1b565b826001876120889190613608565b600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212091906135ae565b6127c4565b83600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121be91906135ae565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061225b906136f6565b915050611f02565b5050505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054116122fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f490613421565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b815260040161233691906134a1565b60206040518083038186803b15801561234e57600080fd5b505afa158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190612c1b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ea90613361565b60405180910390fd5b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020546040516124bf906131d4565b60006040518083038185875af1925050503d80600081146124fc576040519150601f19603f3d011682016040523d82523d6000602084013e612501565b606091505b50509050505050565b6008602052826000526040600020602052816000526040600020818154811061253257600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d4906133c1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561264d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264490613281565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161272b91906134a1565b60405180910390a3505050565b600061274484846119a2565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146127be57818110156127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a7906132c1565b60405180910390fd5b6127bd848484840361256d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282b906133a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289b90613241565b60405180910390fd5b6128af838383612ba5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292c906132e1565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129c89190613527565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a2c91906134a1565b60405180910390a3612a3f848484612baa565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aac90613481565b60405180910390fd5b612ac160008383612ba5565b8060026000828254612ad39190613527565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b289190613527565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612b8d91906134a1565b60405180910390a3612ba160008383612baa565b5050565b505050565b505050565b600081359050612bbe81613d59565b92915050565b600081519050612bd381613d59565b92915050565b600081359050612be881613d70565b92915050565b600060208284031215612c0457612c036137fb565b5b6000612c1284828501612baf565b91505092915050565b600060208284031215612c3157612c306137fb565b5b6000612c3f84828501612bc4565b91505092915050565b60008060408385031215612c5f57612c5e6137fb565b5b6000612c6d85828601612baf565b9250506020612c7e85828601612baf565b9150509250929050565b600080600060608486031215612ca157612ca06137fb565b5b6000612caf86828701612baf565b9350506020612cc086828701612baf565b9250506040612cd186828701612bd9565b9150509250925092565b60008060408385031215612cf257612cf16137fb565b5b6000612d0085828601612baf565b9250506020612d1185828601612bd9565b9150509250929050565b600080600060608486031215612d3457612d336137fb565b5b6000612d4286828701612baf565b9350506020612d5386828701612bd9565b9250506040612d6486828701612baf565b9150509250925092565b600080600060608486031215612d8757612d866137fb565b5b6000612d9586828701612baf565b9350506020612da686828701612bd9565b9250506040612db786828701612bd9565b9150509250925092565b60008060008060808587031215612ddb57612dda6137fb565b5b6000612de987828801612baf565b9450506020612dfa87828801612bd9565b9350506040612e0b87828801612bd9565b9250506060612e1c87828801612bd9565b91505092959194509250565b600080600080600060a08688031215612e4457612e436137fb565b5b6000612e5288828901612baf565b9550506020612e6388828901612bd9565b9450506040612e7488828901612bd9565b9350506060612e8588828901612bd9565b9250506080612e9688828901612bd9565b9150509295509295909350565b612eac8161363c565b82525050565b612ebb8161364e565b82525050565b6000612ecc82613500565b612ed68185613516565b9350612ee6818560208601613691565b612eef81613800565b840191505092915050565b6000612f07602383613516565b9150612f1282613811565b604082019050919050565b6000612f2a600f83613516565b9150612f3582613860565b602082019050919050565b6000612f4d602283613516565b9150612f5882613889565b604082019050919050565b6000612f70603283613516565b9150612f7b826138d8565b604082019050919050565b6000612f93601d83613516565b9150612f9e82613927565b602082019050919050565b6000612fb6602683613516565b9150612fc182613950565b604082019050919050565b6000612fd9602583613516565b9150612fe48261399f565b604082019050919050565b6000612ffc601f83613516565b9150613007826139ee565b602082019050919050565b600061301f602483613516565b915061302a82613a17565b604082019050919050565b6000613042602683613516565b915061304d82613a66565b604082019050919050565b6000613065602683613516565b915061307082613ab5565b604082019050919050565b6000613088602583613516565b915061309382613b04565b604082019050919050565b60006130ab60008361350b565b91506130b682613b53565b600082019050919050565b60006130ce602483613516565b91506130d982613b56565b604082019050919050565b60006130f1602483613516565b91506130fc82613ba5565b604082019050919050565b6000613114603383613516565b915061311f82613bf4565b604082019050919050565b6000613137605083613516565b915061314282613c43565b606082019050919050565b600061315a602583613516565b915061316582613cb8565b604082019050919050565b600061317d601d83613516565b915061318882613d07565b602082019050919050565b60006131a0601f83613516565b91506131ab82613d30565b602082019050919050565b6131bf8161367a565b82525050565b6131ce81613684565b82525050565b60006131df8261309e565b9150819050919050565b60006020820190506131fe6000830184612ea3565b92915050565b60006020820190506132196000830184612eb2565b92915050565b600060208201905081810360008301526132398184612ec1565b905092915050565b6000602082019050818103600083015261325a81612efa565b9050919050565b6000602082019050818103600083015261327a81612f1d565b9050919050565b6000602082019050818103600083015261329a81612f40565b9050919050565b600060208201905081810360008301526132ba81612f63565b9050919050565b600060208201905081810360008301526132da81612f86565b9050919050565b600060208201905081810360008301526132fa81612fa9565b9050919050565b6000602082019050818103600083015261331a81612fcc565b9050919050565b6000602082019050818103600083015261333a81612fef565b9050919050565b6000602082019050818103600083015261335a81613012565b9050919050565b6000602082019050818103600083015261337a81613035565b9050919050565b6000602082019050818103600083015261339a81613058565b9050919050565b600060208201905081810360008301526133ba8161307b565b9050919050565b600060208201905081810360008301526133da816130c1565b9050919050565b600060208201905081810360008301526133fa816130e4565b9050919050565b6000602082019050818103600083015261341a81613107565b9050919050565b6000602082019050818103600083015261343a8161312a565b9050919050565b6000602082019050818103600083015261345a8161314d565b9050919050565b6000602082019050818103600083015261347a81613170565b9050919050565b6000602082019050818103600083015261349a81613193565b9050919050565b60006020820190506134b660008301846131b6565b92915050565b60006040820190506134d160008301856131b6565b6134de60208301846131b6565b9392505050565b60006020820190506134fa60008301846131c5565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006135328261367a565b915061353d8361367a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135725761357161373f565b5b828201905092915050565b60006135888261367a565b91506135938361367a565b9250826135a3576135a261376e565b5b828204905092915050565b60006135b98261367a565b91506135c48361367a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135fd576135fc61373f565b5b828202905092915050565b60006136138261367a565b915061361e8361367a565b9250828210156136315761363061373f565b5b828203905092915050565b60006136478261365a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156136af578082015181840152602081019050613694565b838111156136be576000848401525b50505050565b600060028204905060018216806136dc57607f821691505b602082108114156136f0576136ef61379d565b5b50919050565b60006137018261367a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137345761373361373f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f742077697468647261770000000000000000000000000000000000600082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f446f206e6f742068617665207065726d697373696f6e20746f2077697468647260008201527f617720636f6e7472616374277320666565730000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f596f7520646f206e6f742068617665206f776e65727368697020696e2074686960008201527f73204e4654000000000000000000000000000000000000000000000000000000602082015250565b7f596f75206861766520616c7265616479206561726e656420726f79616c747900600082015250565b7f4e6f742053656e64696e6720456e6f7567682045544820746f2042757920536860008201527f6172657300000000000000000000000000000000000000000000000000000000602082015250565b7f446f206e6f74206861766520746865207065726d697373696f6e20746f20776960008201527f7468647261770000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f75676820466565732070726f766964656420746f206275792060008201527f7368617265730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f742073656e64696e6720656e6f7567682045544820746f2062757920736860008201527f6172657300000000000000000000000000000000000000000000000000000000602082015250565b7f596f752061726520747279696e6720746f2062757920736861726573206d6f7260008201527f65207468616e20617661696c6162696c69747900000000000000000000000000602082015250565b7f4e6f206f6e6520626f756768742074686520736861726573207361646c79206f60008201527f7220596f75206861766520616c72656164792077697468647261776e2074686560208201527f206d6f6e657920636f6c6c656374656400000000000000000000000000000000604082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206f776e65722063616e20646f2073746f636b2073706c6974000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b613d628161363c565b8114613d6d57600080fd5b50565b613d798161367a565b8114613d8457600080fd5b5056fea2646970667358221220969c72703fdc6637e45b40e9c3af648e234076c98d1ecba061357f1ec8cdb93864736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "contractOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 866,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "fees",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 879,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "UsersShareinNFT",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 886,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "nftOwners",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 892,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "sharesHoldedByOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 899,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "nftSharesAndItsPrice",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTShareInfo)871_storage))"
      },
      {
        "astId": 905,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "amountCollectedForNFT",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 913,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "alreadyEarnedRoyalty",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 919,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "nftTotalShares",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 921,
        "contract": "contracts/FractionalNFT.sol:FractionalNFT",
        "label": "feesCollected",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTShareInfo)871_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct FractionalNFT.NFTShareInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTShareInfo)871_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(NFTShareInfo)871_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FractionalNFT.NFTShareInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTShareInfo)871_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFTShareInfo)871_storage": {
        "encoding": "inplace",
        "label": "struct FractionalNFT.NFTShareInfo",
        "members": [
          {
            "astId": 868,
            "contract": "contracts/FractionalNFT.sol:FractionalNFT",
            "label": "totalShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 870,
            "contract": "contracts/FractionalNFT.sol:FractionalNFT",
            "label": "sharePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}